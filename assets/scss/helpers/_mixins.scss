// Box Sizing

@mixin box-sizing($box-model) {
  box-sizing: $box-model;
}

// CSS3

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

//IMAGE RATIO :BEFORE ELEMENT WITH ABSOLUTE POSITIONING 3/4 RATIO
// Constrain a box to a given aspect ratio
@mixin ratio($width: 1, $height: 1) {
  position: relative;

  &::before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }

  > .content,
  > .inside {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

@mixin transform($args) {
  transform: #{$args};
}

@mixin css3-prefix($property, $value) {
  #{$property}: #{$value};
}

@mixin gradient-horizontal($from-color: #0090cd, $to-color: #dd5cf1) {
  background: linear-gradient(to right, $from-color 0%, $to-color 100%); // W3C
}

@mixin gradient-vertical($from-color: #0090cd, $to-color: #dd5cf1) {
  background: linear-gradient(to bottom, $from-color 0%, $to-color 100%); // W3C
}

@mixin background-cover($url) {
  background: url($url) no-repeat center center fixed;
  background-size: cover;
}

// Absolute positioning

@mixin absolute($top: auto, $right: auto, $bottom: auto, $left: auto) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  position: absolute;
}

// Grid

@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

// Vertical Align

@mixin vertical-align {
  @include transform(translateY(-50%));
  position: absolute;
  top: 50%;
}
@mixin horizontal-align {
  @include transform(translateX(-50%));
  position: absolute;
  left: 50%;
}

// Transitions

@mixin ease($property: all, $speed: 0.3s, $timing: $ease-out-quint) {
  transition: $property $speed $timing;
}

@mixin transition($args) {
  transition: #{$args};
}

@mixin transition-delay($delay) {
  transition-delay: $delay;
}

@mixin keyframes($animation-name) {
  @keyframes $animation-name {
    @content;
  }
}

@mixin animation($str) {
  animation: #{$str};
}

@mixin animation-delay($delay) {
  animation-delay: $delay;
}

// Breakpoints

@mixin screen-above($screen-size) {
  @media screen and (min-width: $screen-size) {
    @content;
  }
}

@mixin screen-below($screen-size) {
  @media screen and (max-width: ($screen-size - 1px)) {
    @content;
  }
}

@mixin screen-between($min-screen-size, $max-screen-size) {
  @media screen and (min-width: $min-screen-size) and (max-width: ($max-screen-size - 1px)) {
    @content;
  }
}

// Typography

@mixin font-size($fs-map) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      font-size: $fs-font-size;
    } @else {
      @media screen and (min-width: $fs-breakpoint) {
        font-size: $fs-font-size;
      }
    }
  }
}
